<?xml version="1.0" encoding='utf-8'?>

<!DOCTYPE hrc PUBLIC
  "-//Cail Lomecb//DTD Colorer HRC take5//EN"
  "http://colorer.sf.net/2003/hrc.dtd">

<hrc version="take5" xmlns="http://colorer.sf.net/2003/hrc"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://colorer.sf.net/2003/hrc http://colorer.sf.net/2003/hrc.xsd">

  <!-- glsl -->

  <prototype name="glsl" group="extras" description="GLSL (Monokai)">
    <filename weight="5">/\.glsl$/i</filename>
  </prototype>

  <type name="glsl">

    <import type="c"/>

    <scheme name="glsl">

      <!--fixes () brackets content in void main(...)  -->
      <block start="/(\()/" end="/(\))/" scheme="glsl"
        region00="def:Symbol" region01="def:PairStart" region10="def:Symbol" region11="def:PairEnd"/>

      <keywords region="def:Directive">
        <word name='ifdef'/>
        <word name='endif'/>
        <word name='else'/>
        <word name="varying"/>
        <word name="mediump"/>
        <word name="attribute"/>
        <word name="precision"/>
        <word name="highp"/>
        <word name='uniform'/>
        <word name="in"/>
        <word name="out"/>
        <word name="return"/>
      </keywords>

      <keywords region="def:Keyword">
        <word name="vec2"/>
        <word name="vec3"/>
        <word name="vec4"/>
        <word name="ivec2"/>
        <word name="ivec3"/>
        <word name="ivec4"/>
        <word name="mat4"/>
        <word name="sampler2D"/>
        <word name="discard"/>
      </keywords>

      <keywords region="def:KeywordStrong">
        <word name="atan"/>
        <word name="pow"/>
        <word name="max"/>
        <word name="dot"/>
        <word name="sin"/>
        <word name="cos"/>
        <word name="cross"/>
        <word name="normalize"/>
        <word name="clamp"/>
      </keywords>

      <keywords region="def:Identifier">
        <word name="gl_Position"/>
        <word name="gl_FragColor"/>
        <word name="gl_FragCoord"/>
      </keywords>
      

      <inherit scheme="c">
        <virtual scheme="c" subst-scheme="glsl"/>
      </inherit>

      <regexp match='/\w/' region0="def:Symbol"/>

    </scheme>

  </type>

  <!-- hlsl -->

  <prototype name="hlsl" group="extras" description="HLSL (Monokai)">
    <filename weight="5">/\.hlsl$/i</filename>
  </prototype>

  <type name="hlsl">
    <import type="glsl"/>
    <scheme name="hlsl">

      <keywords region="def:Keyword">
        <word name="float1"/>
        <word name="float2"/>
        <word name="float3"/>
        <word name="float4"/>
        <word name="int1"/>
        <word name="int2"/>
        <word name="int3"/>
        <word name="int4"/>
      </keywords>

      <keywords region="def:KeywordStrong">
        <word name="register"/>
        <word name="sampler"/>
        <word name="packoffset"/>
        <word name="TEXCOORD0"/>
        <word name="COLOR"/>
        <word name="NORMAL"/>
        <word name="BINORMAL"/>
        <word name="POSITION"/>
        <word name="TANGENT"/>
        <word name="DEPTH"/>
        <word name="tex2D"/>
      </keywords>

      <inherit scheme="glsl">
        <virtual scheme="glsl" subst-scheme="hlsl"/>
      </inherit>

    </scheme>
  </type>

  <!-- protobuf -->

  <prototype name="protobuf" group="extras" description="Proto Extended (Monokai)">
    <filename weight="4">/\.proto$/i</filename>
  </prototype>

  <type name='protobuf'>

    <import type="c"/>

    <scheme name="protobuf">

      <block start="/^\s*(package)\s+(\w+)/" end="/(\;)/" scheme="protobuf"
        region01="def:KeywordStrong" region02="def:Identifier" region11="def:Symbol"/>

      <block start="/^\s*(enum)\s+(\w+)\s*((\{))/" end="/(\})/" scheme="protobufEnum"
        region01="def:Keyword" region02="def:Identifier"
        region03="def:PairStart" region04="def:Symbol"
        region10="def:PairEnd" region11="def:Symbol"/>

      <block start="/(returns)\s*((\())/" end="/(\))/" scheme="protobufArgs"
        region01="def:KeywordStrong" region02="def:Symbol" region03="def:PairStart"
        region10="def:Symbol" region11="def:PairEnd"/>

      <block start="/(\w+)\s*((\())/" end="/(\))/" scheme="protobufArgs"
        region01="def:Identifier" region02="def:Symbol" region03="def:PairStart"
        region10="def:Symbol" region11="def:PairEnd"/>

      <block start="/^\s*(oneof|)\s+(\w+)\s*((\{))/" end="/(\})/" scheme="protobufParam"
        region01="def:KeywordStrong" region02="def:Identifier"
        region03="def:PairStart" region04="def:Symbol"
        region10="def:PairEnd" region11="def:Symbol"/>

      <block start="/^\s*(\w+)\s+(\w+)\s*((\{))/" end="/(\})/" scheme="protobufParam"
        region01="def:Keyword" region02="def:Identifier"
        region03="def:PairStart" region04="def:Symbol"
        region10="def:PairEnd" region11="def:Symbol"/>

      <block start="/(\[|\()/" end="/(\]|\))/" scheme="protobuf"
        region00="def:PairStart" region01="def:Symbol"
        region10="def:PairEnd" region11="def:Symbol"/>

      <keywords region="def:Directive">
        <word name='syntax'/>
        <word name='package'/>
        <word name='returns'/>
        <word name='import'/>
        <word name='repeated'/>
        <word name='oneof'/>
      </keywords>

      <keywords region="def:Symbol">
        <word name='google'/>
        <word name='protobuf'/>
      </keywords>

      <keywords region="def:Operator">
        <symb name="="/>
      </keywords>

      <keywords region="def:BooleanConstant">
        <word name='true'/>
        <word name='false'/>
      </keywords>

      <keywords region="def:Keyword">
        <word name='option'/>
        <word name='go_package'/>
        <word name='rpc'/>
        <word name='message'/>
        <word name='service'/>
        <word name='syntax'/>
        <word name='map'/>
        <word name='deprecated'/>
        <word name='string'/>
        <word name='bool'/>
        <word name='int64'/>
        <word name='uint64'/>
        <word name='int32'/>
        <word name='uint32'/>
        <word name='true'/>
        <word name='false'/>
        <word name='Timestamp'/>
        <word name='Int64Value'/>
        <word name='Empty'/>
      </keywords>

      <inherit scheme="c">
        <virtual scheme="c" subst-scheme="protobuf"/>
      </inherit>

      <regexp match='/\w/' region0="def:Symbol"/>

    </scheme>

    <scheme name="protobufEnum">
      <block start="/\s*(\w+)\s*(\=)/" end="/\;/" scheme="protobuf"
        region01="def:Constant"
        region02="def:Operator"
        />
      <inherit scheme="protobuf"/>
    </scheme>

    <scheme name="protobufArgs">
      <regexp match='/\w/' region0="def:Keyword"/>
      <inherit scheme="protobuf"/>
    </scheme>

    <scheme name="protobufParam">
      <block start="/\s*(\w+)\s+(\w+)\s*(\=)/" end="/\;/" scheme="protobuf"
        region01="def:Keyword"
        region02="def:Symbol"
        region03="def:Operator"
        />
      <inherit scheme="protobuf"/>
    </scheme>
  </type>

  <!-- python -->

  <prototype name="pyExt" group="extras" description="Python Extended (Monokai)">
    <filename weight="5">/\.py$/i</filename>
  </prototype>

  <type name="pyExt">

    <region name="FunctionName" parent="def:Identifier"/>
    <region name="ClassName" parent="def:Identifier"/>
    <region name="FunctionParameter" parent="def:ParameterStrong"/>
    <region name="StrongKeyword" parent="def:Operator"/>
    <region name="ImportKeyword" parent="def:Directive"/>
    <region name="SelfKeyword" parent="def:ParameterStrong"/>
    <region name="StringEscape" parent="def:StringContent"/>
    <region name="StringFormat" parent="def:BooleanConstant"/>

    <import type="python"/>

    <scheme name="pyExt">

      <block start="/#/" end="/$/" region="def:Comment" scheme="pyExtLineComment"/>

      <block start="/(?:(from)\s+(\w+)\s+)*(import\s+)/" end="/(\s+(as)\s+)*$/" scheme="pyExtDirective"
        region01="def:Directive" region02="def:DirectiveContent" region03="def:Directive"
        region10="def:Directive" region12="def:Directive"/>

      <block start="/(lambda)\s+/" end="/(\:)/" scheme="pyExtLambda"
        region01="def:Keyword"
        region10="def:Symbol"/>

      <block start="/^\s*(def)\s+(\w+)\s*((\())/" end="/(\))/" scheme="pyExtFunctionDefine"
        region01="def:FunctionKeyword" region02="FunctionName" region03="def:Symbol" region04="def:PairStart"
        region10="def:Symbol" region11="def:PairEnd"/>

      <block start="/^\s*(class)\s+(\w+)/" end="/(\:)/" scheme="pyExt"
        region01="def:ClassKeyword" region02="ClassName"
        region10="def:Symbol"/>

      <keywords region="StrongKeyword">
        <word name="return"/>
        <word name="and"/>
        <word name="or"/>
        <word name="not"/>
        <word name="in"/>
      </keywords>

      <block start="/(\w+)\s*((\())/" end="/(\))/" scheme="pyExtArguments"
        region01="def:Keyword" region02="def:Symbol" region03="def:PairStart"
        region10="def:Symbol" region11="def:PairEnd"/>

      <keywords region="SelfKeyword">
        <word name="self"/>
      </keywords>

      <keywords region="StrongKeyword">
        <word name="if"/>
        <word name="else"/>
        <word name="elif"/>
        <word name="for"/>
        <word name="pass"/>
        <word name="match"/>
        <word name="case"/>
        <symb name=":="/>
        <symb name="="/>
        <symb name="@"/>
      </keywords>

      <keywords region="ImportKeyword">
        <word name="from"/>
        <word name="import"/>
        <word name="as"/>
      </keywords>

      <keywords region= "def:BooleanConstant">
        <word name="True"/>
        <word name="False"/>
        <word name="None"/>
      </keywords>

      <keywords region= "def:Symbol">
        <symb name=","/>
        <symb name=":"/>
        <symb name="."/>
        <symb name="`"/>
      </keywords>

      <keywords region="def:Keyword">
        <word name="cache"/>
      </keywords>

      <block start="/(f)(\')/" end="/\'/" scheme="pyExtFmtString"
        region00="def:PairStart" region01="def:Keyword" region="def:StringEdge"
        region10="def:PairEnd" />

      <block start="/(r)(\')/" end="/\'/" scheme="pyExtRawString"
        region00="def:PairStart" region01="def:Keyword" region="def:StringEdge"
        region10="def:PairEnd" />

      <regexp match="/\b\d+([Ee][-+]?\d+)?([jJ])?(\w*)\b/" region0="pyNumber" region1="def:Number" region2="def:Keyword" />

      <inherit scheme="python">
        <virtual scheme="python:StringSingle" subst-scheme="pyExtStringSingle"/>
        <virtual scheme="python:StringDouble" subst-scheme="pyExtStringDouble"/>
        <virtual scheme="python" subst-scheme="pyExt"/>
      </inherit>

      <regexp match='/\w/' region0="def:Symbol"/>

    </scheme>

    <scheme name="pyExtFmtStringSingle">
      <regexp match='/\{[^\}]+(\:[^\}]+)\}/' region0="def:Symbol" region1="def:Number"/>
      <regexp match='/\{[^\}]+\}/' region0="def:Symbol"/>
      <inherit scheme="python:StringSingle"/>
    </scheme>

    <scheme name="pyExtFmtStringDouble">
      <regexp match='/\{[^\}]+(\:[^\}]+)\}/' region0="def:Symbol" region1="def:Number"/>
      <regexp match='/\{[^\}]+\}/' region0="def:Symbol"/>
      <inherit scheme="python:StringDouble"/>
    </scheme>

    <entity name='format' value='[\-\+\#0\x20]*?[\d\*]*(?{}\.[\d\*]+)?(h|l|L|ll|I|I32|I64)?([SsCcsuidopxXnEefgGaAZYmHM]|zu)'/>

    <scheme name="pyExtStringSingle">
      <regexp match="/\%(%format;|\%)/" region="StringFormat"/>
      <regexp match="/\\./" region="StringFormat"/>
      <inherit scheme="python:StringSingle"/>
    </scheme>

    <scheme name="pyExtStringDouble">
      <regexp match="/\%(%format;|\%)/" region="StringFormat"/>
      <regexp match="/\\./" region="StringFormat"/>
      <inherit scheme="python:StringDouble"/>
    </scheme>

    <scheme name="pyExtRawString">
      <regexp match='/\\[^xX\d]/' region0="StringEscape"/>
      <regexp match='/\{[ \d\-\,]+\}/' region0="StringEscape"/>
      <regexp match='/\^/' region0="StringEscape"/>
      <inherit scheme="python:RawStringSingle"/>
    </scheme>

    <scheme name="pyExtFunctionDefine">
      <block start="/\s*(\w+)(\:*)/" end="/\,|\)?=/" scheme="pyExt" region01="FunctionParameter" region02="def:Symbol"/>
      <inherit scheme="pyExt"/>
    </scheme>

    <scheme name="pyExtArguments">
      <block start="/\s*(\w+)\s*(\=(?!\=))/" end="/\,|\)?=/" scheme="pyExt"
        region01="FunctionParameter" region02="def:Operator"/>
      <inherit scheme="pyExt"/>
    </scheme>

    <scheme name="pyExtLambda">
      <regexp match='/\w+/' region0="FunctionParameter"/>
      <inherit scheme="pyExt"/>
    </scheme>

    <scheme name="pyExtFunctionCall">
      <inherit scheme="pyExt"/>
    </scheme>

    <scheme name="pyExtDirective">
      <keywords region= "def:Constant">
        <symb name="*"/>
      </keywords>
      <regexp match='/\w/' region0="def:DirectiveContent"/>
      <inherit scheme="pyExt"/>
    </scheme>

    <scheme name="pyExtLineComment">
      <keywords region="def:Constant">
        <word name="python"/>
        <word name="python3"/>
      </keywords>
      <!--inherit scheme="def:Comment"/--> <!-- highlighs URLs -->
    </scheme>

  </type>

  <!-- text -->

  <prototype name="textExt" group="extras" description="Plain text Extended (Monokai)">
      <filename weight="5">/(\.txt$|\.rus|\.nfo|\.log|.*install.*|.*ChangeLog.*|AUTHORS|COPYING|FAQ|LICENSE|TODO$)/i</filename>
      <filename weight="5">/\.spo/ix</filename>
  </prototype>

  <type name="textExt">

    <import type="text"/>

    <scheme name="textExt">

      <regexp match="/\b(\d{0,10}[\,\.]?\d{0,10}([eE][\-\+]?\d+)?)\b/" region0="def:Keyword"/>

      <inherit scheme="text">
        <virtual scheme="text" subst-scheme="textExt"/>
      </inherit>

    </scheme>

  </type>

  <!-- dockerfile -->

  <prototype name="dfExt" group="extras" description="Dockerfile Extended (Monokai)">
      <filename weight="5">/Dockerfile/ix</filename>
  </prototype>

  <type name="dfExt">

    <import type="shell"/>
    <scheme name="dfExt">

      <keywords region="def:Keyword">
        <word name="FROM"/>
        <word name="ARG"/>
        <word name="RUN"/>
        <word name="ADD"/>
        <word name="COPY"/>
        <word name="CMD"/>
        <word name="WORKDIR"/>
        <word name="ENTRYPOINT"/>
      </keywords>

      <inherit scheme="shell.in">
        <virtual scheme="shell.in" subst-scheme="dfExt"/>
      </inherit>
    </scheme>

  </type>

  <!-- .env and other configs (add new extensions if needed) -->

  <prototype name="confExt" group="extras" description="Configs Extended (Monokai)">
      <filename weight="5">/\.env*/ix</filename>
  </prototype>

  <type name="confExt">

    <import type="config"/>

    <scheme name="confExt">
      <inherit scheme="config">
        <virtual scheme="config" subst-scheme="confExt"/>
      </inherit>
    </scheme>

  </type>

  <!-- cpp -->

  <prototype name="cppExt" group="extras" description="CPP Extended (Monokai)">
    <filename weight="5">/\.(cpp|h|hpp|c)$/i</filename>
  </prototype>

  <type name="cppExt">

    <region name="cppStringEscape" parent="def:BooleanConstant"/>

    <import type="c"/>
    <import type="cpp"/>

    <scheme name="cppExt">

      <block start="/^\s*(#define)\s+(\w+)/" end="/$/" scheme="cppExt"
        region01="def:Directive" region02="def:Identifier" region03="def:PairStart"
        region10="def:Symbol" region11="def:PairEnd"/>

      <block start="/^\s*(struct|class)\s*(\w+)\s*((\{))/" end="/(\})/" scheme="cppExt"
        region01="def:Keyword" region02="def:Identifier" region03="def:Symbol" region04="def:PairStart"
        region10="def:Symbol" region11="def:PairEnd"/>

      <!--regexp match='/(\w+)(\s*\([^\)\"]*\)\s*\{)?=/' region1="def:Identifier"/-->

      <regexp match='/^\s*(struct|class)\s*(\w+)\s*/' region1="def:Symbol" region2="def:Identifier"/>

      <block start="/^\s*(\w+)\s+(\*)?(\w+)\s*((\())/" end="/(\))/" scheme="cppExt"
        region01="def:FunctionKeyword" region02="def:Symbol" region03="def:Identifier"
        region04="def:Symbol" region05="def:PairStart"
        region10="def:Symbol" region11="def:PairEnd"/>

      <block start="/^\s*(\w+)\s+(\w+)\s*(\:\:)\s*(\w+)\s*((\())/" end="/(\))/" scheme="cppExt"
        region01="def:FunctionKeyword" region02="def:Symbol" region03="def:Symbol" region04="def:Identifier"
        region05="def:Symbol" region06="def:PairStart"
        region10="def:Symbol" region11="def:PairEnd"/>

      <keywords region="def:Keyword">
        <word name="int8_t"/>
        <word name="int16_t"/>
        <word name="int32_t"/>
        <word name="uint8_t"/>
        <word name="uint16_t"/>
        <word name="uint32_t"/>
        <word name="void"/>
      </keywords>

      <keywords region="def:Operator">
        <word name="return"/>
        <word name="if"/>
        <word name="else"/>
        <word name="for"/>
        <word name="while"/>
        <word name="using"/>
        <word name="namespace"/>
        <word name="switch"/>
        <word name="case"/>
        <word name="break"/>
      </keywords>

      <keywords region="def:Symbol">
        <symb name=":="/>
        <symb name="+="/>
        <symb name="-="/>
        <symb name="*="/>
        <symb name="++"/>
        <symb name="--"/>
        <symb name="="/>
      </keywords>

      <keywords region="def:BooleanConstant">
        <word name='true'/>
        <word name='false'/>
        <word name='NULL'/>
        <word name='null'/>
      </keywords>

      <block start="/(\w+)\s*((\())/" end="/(\))/" scheme="cppExt"
        region01="def:Keyword" region02="def:Symbol" region03="def:PairStart"
        region10="def:Symbol" region11="def:PairEnd"/>

      <inherit scheme="cpp">
        <virtual scheme="c:Expression" subst-scheme="cppExtExpression"/>
        <virtual scheme="def:Path" subst-scheme="cppExtPath"/>
        <virtual scheme="cpp" subst-scheme="cppExt"/>
      </inherit>

      <regexp match='/\w/' region0="def:Symbol"/>

    </scheme>

    <scheme name="cppExtPath">
      <regexp match='/[^\>^\"]+/' region0="def:String"/>
    </scheme>

    <scheme name="cppExtExpression">
      <inherit scheme="c:Expression">
        <virtual scheme="c:Character" subst-scheme="cppExtCharacter"/>
        <virtual scheme="c:StringContent" subst-scheme="cppExtStringContent"/>
        <virtual scheme="c:Expression" subst-scheme="cppExt"/>
      </inherit>
      <regexp match='/\w/' region0="def:Symbol"/>
    </scheme>

    <scheme name="cppExtCharacter">
      <regexp match="/[Ll]?'(\\\D | \\[0-7]{1,3} | \\x[\da-fA-F]{2} | [^\\']){1,4}'/x" region="def:Character"/>
      <regexp match="/'.*?'/" region="def:Error"/>
    </scheme>

    <!-- added %zu support -->
    <entity name='format' value='[\-\+\#0\x20]*?[\d\*]*(?{}\.[\d\*]+)?(h|l|L|ll|I|I32|I64)?([SsCcsuidopxXnEefgGaAZ]|zu)'/>

    <scheme name="cppExtStringContent">
      <regexp match="/\%(%format;|\%)/" region="cppStringEscape"/>
      <regexp match="/\\./" region="cppStringEscape" />
      <inherit scheme="c:StringContent">
        <virtual scheme="c:StringContent" subst-scheme="cppExt"/>
      </inherit>
    </scheme>

  </type>

  <!-- javascript -->

  <prototype name="jsExt" group="extras" description="JavaScript Extended (Monokai)">
    <filename weight="5">/\.(js)$/i</filename>
  </prototype>

  <type name="mdExt"/>

  <type name="jsExt">

    <region name="FunctionDefine" parent="def:Identifier"/>
    <region name="FunctionParameter" parent="def:ParameterStrong"/>
    <region name="FunctionCall" parent="def:Keyword"/>
    <region name="Operator" parent="def:Operator"/>
    <region name="SelfKeyword" parent="def:ParameterStrong"/>
    <region name="LineComment" parent="def:LineComment"/>

    <import type="jScript"/>
    <import type="markdown"/>

    <scheme name="jsExt">

      <block start="/(`)/" end="/(`)/"
        region00="def:Symbol" region01="def:PairStart" region="def:String"
        region10="def:Symbol" region11="def:PairEnd"/>

      <inherit scheme="jsComments" />

      <block start="/(\w+)\s*\=\s*(function)\s*((\())/" end="/(\))/" scheme="jsExtFunctionDefine"
        region01="FunctionDefine" region02="def:FunctionKeyword" region03="def:Symbol" region04="def:PairStart"
        region10="def:Symbol" region11="def:PairEnd"/>

      <block start="/^\s*(function)\s+(\w+)\s*((\())/" end="/(\))/" scheme="jsExtFunctionDefine"
        region01="def:FunctionKeyword" region02="FunctionDefine" region03="def:Symbol" region04="def:PairStart"
        region10="def:Symbol" region11="def:PairEnd"/>

      <block start="/(\w+)\s*((\())/" end="/(\))/" scheme="jsExt"
        region01="FunctionCall" region02="def:Symbol" region03="def:PairStart"
        region10="def:Symbol" region11="def:PairEnd"/>

      <keywords region="SelfKeyword">
        <word name="this"/>
      </keywords>

      <keywords region="Operator">
        <symb name="="/>
        <symb name="-="/>
        <symb name="+="/>
        <symb name=":="/>
        <symb name="+"/>
        <symb name="-"/>
        <symb name="*"/>
        <symb name="/"/>
        <symb name="~"/>
        <symb name="^"/>
        <symb name="$"/>
        <symb name="&amp;"/>
        <word name="return"/>
      </keywords>

      <inherit scheme="jScript">
        <virtual scheme="jScript" subst-scheme="jsExt"/>
      </inherit>

      <regexp match='/\w/' region0="def:Symbol"/>
    </scheme>

    <scheme name="jsExtFunctionDefine">
      <block start="/\s*(\w+)(\:*)/" end="/\,|\)?=/" scheme="jsExt" region01="FunctionParameter"/>
      <inherit scheme="pyExt"/>
    </scheme>

  </type>

  <!-- html (supports embedded types) -->

  <prototype name="htmlExt" group="extras" description="HTML Extended (Monokai)">
    <filename weight="5">/\.html$/i</filename>
  </prototype>

  <type name="htmlExt">
    <import type="html"/>
    <import type="glsl"/>
    <import type="hlsl"/>
    <import type="jsExt"/>

    <scheme name="htmlExt">

      <block start="/ ((&lt;) \s* (script)\M\b \s* .*shader.* &gt;?)/ix" end="/(&lt;\/(script)\&gt;)/ix"
        scheme="htmlExtShaderScript"
        region01="PairStrongStart" region10="PairStrongEnd"
        region02="htmlTagBr" region03="htmlOpenTag" region11="htmlTagBr" region12="htmlCloseTag"/>

      <block start="/ ((&lt;) \s* (script) \s* &gt;)/ix" end="/(&lt;\/(script)\&gt;)/ix"
        scheme="jsExt"
        region01="PairStrongStart" region10="PairStrongEnd"
        region02="htmlTagBr" region03="htmlOpenTag" region11="htmlTagBr" region12="htmlCloseTag"/>

      <inherit scheme="html">
        <virtual scheme="html:htmlPairs" subst-scheme="htmlExtPairs"/>
        <virtual scheme="html" subst-scheme="htmlExt"/>
      </inherit>

      <regexp match='/\w/' region0="def:Symbol"/>

    </scheme>


    <scheme name="htmlExtPairs">
    <!--
    //TODO: this highlights p,td,tr pairs. disabled for now. Breaks fences in markdown.

    <block start="/((&lt;) \s* \b(%pairedtags;)\M\b (\s* &gt;)?)/ixs" end="/((\/&gt;)|(&lt;\/)(\Y3)(&gt;)|(&lt;\/(%pairedtags;)\b)?=)/ixs"
      scheme="htmlExtPairInside"
      region01="PairStart" region11="PairEnd"
      region02="htmlTagBr" region03="htmlOpenTag"

      region12="htmlTagBr"
      region13="htmlTagBr" region14="htmlCloseTag" region15="htmlTagBr"
    />
    -->
    </scheme>

    <scheme name="htmlExtPairInside">
      <block start="/~/" end="/\M(\/?&gt;|[\%\?]?~1&gt;)/" 
        scheme="htmlCore" region="htmlUnknowParam"
      />
      <regexp match="/&gt;/" region="htmlTagBr" />
      <inherit scheme="html" />
    </scheme>


    <scheme name="htmlExtShaderScript">
      <block start="/~/" end="/[?%]?~1(&gt;)/" scheme="htmlCore" region11="htmlTagBr"/>
      <inherit scheme="glsl" />
      <inherit scheme="hlsl" />
    </scheme>

  </type>

  <!-- json : in progress, need to highliht trailing comma as an error -->
<!--
  <prototype name="jsonExt" group="extras" description="JSON Extended (Monokai)">
      <filename weight="5">/(\.json$)/i</filename>
  </prototype>

  <type name="jsonExt">

    <import type="json"/>

    <scheme name="jsonExt">

      <block start="/(\{)/" end="/(\})/" scheme="jsonVars"/>

      <inherit scheme="json">
        <virtual scheme="json" subst-scheme="jsonExt"/>
      </inherit>

    </scheme>

    <scheme name="jsonVars">

      <regexp match='/\,$/' region0="def:Error"/>

      <inherit scheme="json">
        <virtual scheme="json" subst-scheme="jsonExt"/>
      </inherit>

    </scheme>

  </type>
 -->

  <!-- go -->

  <prototype name="goExt" group="extras" description="GO Extended (Monokai)">
      <filename weight="5">/(\.go$)/i</filename>
  </prototype>

  <type name="goExt">

    <region name="FunctionName" parent="def:Identifier"/>
    <region name="FunctionCall" parent="def:Keyword"/>
    <region name="FunctionParameter" parent="def:ParameterStrong"/>

    <import type="go"/>

    <scheme name="goExt">

      <block start="/\/\//" end="/$/" region="def:Comment" scheme="goExtLineComment"/>

      <block start="/\/\*/" end="/\*\//" region="def:Comment" scheme="goExtLineComment"/>

      <keywords region="def:Operator">
        <word name="import"/>
        <word name="return"/>
        <symb name="="/>
        <symb name="-="/>
        <symb name="+="/>
        <symb name=":="/>
        <symb name="+"/>
        <symb name="-"/>
        <symb name="*"/>
        <symb name="/"/>
        <symb name="~"/>
        <symb name="^"/>
        <symb name="$"/>
        <symb name="&amp;"/>
      </keywords>

      <keywords region="def:Keyword">
        <word name="bool"/>
        <word name="string"/>
      </keywords>

      <keywords region="def:BooleanConstant">
        <word name="nil"/>
        <word name="true"/>
        <word name="false"/>
      </keywords>

      <regexp match='/(\.)(\w+)/' region1="def:Symbol" region2="def:Keyword"/>

      <block start="/^\s*(package)\s+(\w+)/" end="/$/" scheme="goExt"
        region01="def:Keyword" region02="def:Identifier" region03="def:PairStart"
        region10="def:Symbol" region11="def:PairEnd"/>

      <block start="/^\s*(func)\s+(\([^\)]+\)\s*)?(\w+)\s*((\())/" end="/(\))/" scheme="goExtFunctionDefine"
        region01="def:FunctionKeyword" region02="def:Symbol" region03="FunctionName" region04="def:Symbol" region05="def:PairStart"
        region10="def:Symbol" region11="def:PairEnd"/>

<!--
      <block start="/^\s*(func)\s+((\()(\w+)\s+([^\)]+)\s*(\))\s*)(\w+)\s*((\())/" end="/(\))/" scheme="goExtFunctionDefine"
        region01="def:FunctionKeyword"
        region02="def:PairStart"
        region04="FunctionParameter"
        region05="def:Keyword"
        region06="def:PairEnd"
        region07="FunctionName" region08="def:Symbol" region09="def:PairStart"
        region10="def:Symbol" region11="def:PairEnd"/>

      <block start="/^\s*(func)\s+(\w+)\s*((\())/" end="/(\))/" scheme="goExtFunctionDefine"
        region01="def:FunctionKeyword" region02="FunctionName" region03="def:Symbol" region04="def:PairStart"
        region10="def:Symbol" region11="def:PairEnd"/>
-->

      <block start="/(\w+)\s*((\())/" end="/(\))/" scheme="goExt"
        region01="FunctionCall" region02="def:Symbol" region03="def:PairStart"
        region10="def:Symbol" region11="def:PairEnd"/>

      <block start="/(\w+)\s*((\{))/" end="/(\})/" scheme="goExt"
        region01="FunctionCall" region02="def:Symbol" region03="def:PairStart"
        region10="def:Symbol" region11="def:PairEnd"/>

      <inherit scheme="go">
        <virtual scheme="go:Expression" subst-scheme="goExtExpression"/>
        <virtual scheme="go" subst-scheme="goExt"/>
      </inherit>

      <regexp match='/\w/' region0="def:Symbol"/>

    </scheme>

    <scheme name="goExtLineComment">
      <inherit scheme="def:Comment"/>
    </scheme>

    <scheme name="goExtFunctionDefine">
      <block start="/\s*(\w+)(\:*)/" end="/\,|\)?=/" scheme="goExt" region01="FunctionParameter"/>
      <inherit scheme="goExt"/>
    </scheme>

    <scheme name="goExtTypeDefine">
      <inherit scheme="goExt"/>
    </scheme>

    <scheme name="goExtExpression">
      <inherit scheme="go:Expression">
        <virtual scheme="go:Expression" subst-scheme="goExt"/>
      </inherit>
    </scheme>

  </type>

  <!-- graphwiz -->
  <prototype name="gvExt" group="extras" description="Graphwiz Extended (Monokai)">
      <filename weight="5">/\.(gv|dot)/ix</filename>
  </prototype>
  <type name="gvExt">
    <import type="graphviz"/>
    <scheme name="gvExt">
      <inherit scheme="graphviz">
        <virtual scheme="graphviz" subst-scheme="gvExt"/>
      </inherit>
    </scheme>
  </type>

  <!-- markdown -->

  <prototype name="mdExt" group="extras" description="Markdown Extended (Monokai)">
      <filename weight="5">/\.md/i</filename>
  </prototype>

  <type name="mdExt">

    <region name="s" parent="def:PairStart"/>
    <region name="e" parent="def:PairEnd"/>
    <region name="Label" parent="def:Label"/>
    <region name="Fence" parent="def:Label"/>
    <entity name="m" value="(?{Fence}(?:`{3,}|\~{3,}))"/>

    <import type="markdown"/>
    <import type="textExt"/>
    <import type="pyExt"/>
    <import type="htmlExt"/>
    <import type="jsExt"/>
    <import type="cppExt"/>
    <import type="goExt"/>
    <import type="protobuf"/>
    <import type="shell"/>
    <import type="Batch"/>
    <import type="default"/>
    <import type="diff"/>
    <import type="xml"/>
    <import type="sql"/>

    <scheme name="mdExt">

      <block start="/(?{s}%m;\s*(?{Label}(sh|bash)))/" end="/(?{e}(?{Fence}\y{Fence}))/" scheme="shell.in" />
      <block start="/(?{s}%m;\s*(?{Label}(bat|cmd)))/" end="/(?{e}(?{Fence}\y{Fence}))/" scheme="Batch" />
      <block start="/(?{s}%m;\s*(?{Label}(html)))/" end="/(?{e}(?{Fence}\y{Fence}))/" scheme="htmlExt" />
      <block start="/(?{s}%m;\s*(?{Label}(python)))/" end="/(?{e}(?{Fence}\y{Fence}))/" scheme="pyExt" />
      <block start="/(?{s}%m;\s*(?{Label}(cpp|c)))/" end="/(?{e}(?{Fence}\y{Fence}))/" scheme="cppExt" />
      <block start="/(?{s}%m;\s*(?{Label}(go|golang)))/" end="/(?{e}(?{Fence}\y{Fence}))/" scheme="goExt"  content-priority="low"/>
      <block start="/(?{s}%m;\s*(?{Label}(proto)))/" end="/(?{e}(?{Fence}\y{Fence}))/" scheme="protobuf" />
      <block start="/(?{s}%m;\s*(?{Label}(json|js)))/" end="/(?{e}(?{Fence}\y{Fence}))/" scheme="jsExt" content-priority="low"/>
      <block start="/(?{s}%m;\s*(?{Label}(diff)))/" end="/(?{e}(?{Fence}\y{Fence}))/" scheme="diff" />
      <block start="/(?{s}%m;\s*(?{Label}(xml)))/" end="/(?{e}(?{Fence}\y{Fence}))/" scheme="xml" />
      <block start="/(?{s}%m;\s*(?{Label}(sql)))/" end="/(?{e}(?{Fence}\y{Fence}))/" scheme="sql" />
      <block start="/(?{s}%m;)/" end="/(?{e}(?{Fence}\y{Fence}))/" scheme="textExt"/>

      <inherit scheme="markdown">
        <virtual scheme="markdown:Text" subst-scheme="mdExtText"/>
        <virtual scheme="markdown" subst-scheme="mdExt"/>
      </inherit>

    </scheme>

    <scheme name="mdExtText">
      <inherit scheme="def:NetURL" />
      <inherit scheme="markdown:Text" />
    </scheme>

  </type>

</hrc>

